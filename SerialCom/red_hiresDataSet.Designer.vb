'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("red_hiresDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class red_hiresDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablead_user As ad_userDataTable
    
    Private tablebatch As batchDataTable
    
    Private tableproduct As productDataTable
    
    Private tableuniquecode As uniquecodeDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ad_user")) Is Nothing) Then
                MyBase.Tables.Add(New ad_userDataTable(ds.Tables("ad_user")))
            End If
            If (Not (ds.Tables("batch")) Is Nothing) Then
                MyBase.Tables.Add(New batchDataTable(ds.Tables("batch")))
            End If
            If (Not (ds.Tables("product")) Is Nothing) Then
                MyBase.Tables.Add(New productDataTable(ds.Tables("product")))
            End If
            If (Not (ds.Tables("uniquecode")) Is Nothing) Then
                MyBase.Tables.Add(New uniquecodeDataTable(ds.Tables("uniquecode")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ad_user() As ad_userDataTable
        Get
            Return Me.tablead_user
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property batch() As batchDataTable
        Get
            Return Me.tablebatch
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property product() As productDataTable
        Get
            Return Me.tableproduct
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property uniquecode() As uniquecodeDataTable
        Get
            Return Me.tableuniquecode
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As red_hiresDataSet = CType(MyBase.Clone,red_hiresDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ad_user")) Is Nothing) Then
                MyBase.Tables.Add(New ad_userDataTable(ds.Tables("ad_user")))
            End If
            If (Not (ds.Tables("batch")) Is Nothing) Then
                MyBase.Tables.Add(New batchDataTable(ds.Tables("batch")))
            End If
            If (Not (ds.Tables("product")) Is Nothing) Then
                MyBase.Tables.Add(New productDataTable(ds.Tables("product")))
            End If
            If (Not (ds.Tables("uniquecode")) Is Nothing) Then
                MyBase.Tables.Add(New uniquecodeDataTable(ds.Tables("uniquecode")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablead_user = CType(MyBase.Tables("ad_user"),ad_userDataTable)
        If (initTable = true) Then
            If (Not (Me.tablead_user) Is Nothing) Then
                Me.tablead_user.InitVars
            End If
        End If
        Me.tablebatch = CType(MyBase.Tables("batch"),batchDataTable)
        If (initTable = true) Then
            If (Not (Me.tablebatch) Is Nothing) Then
                Me.tablebatch.InitVars
            End If
        End If
        Me.tableproduct = CType(MyBase.Tables("product"),productDataTable)
        If (initTable = true) Then
            If (Not (Me.tableproduct) Is Nothing) Then
                Me.tableproduct.InitVars
            End If
        End If
        Me.tableuniquecode = CType(MyBase.Tables("uniquecode"),uniquecodeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableuniquecode) Is Nothing) Then
                Me.tableuniquecode.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "red_hiresDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/red_hiresDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablead_user = New ad_userDataTable()
        MyBase.Tables.Add(Me.tablead_user)
        Me.tablebatch = New batchDataTable()
        MyBase.Tables.Add(Me.tablebatch)
        Me.tableproduct = New productDataTable()
        MyBase.Tables.Add(Me.tableproduct)
        Me.tableuniquecode = New uniquecodeDataTable()
        MyBase.Tables.Add(Me.tableuniquecode)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializead_user() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializebatch() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeproduct() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Function ShouldSerializeuniquecode() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As red_hiresDataSet = New red_hiresDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub ad_userRowChangeEventHandler(ByVal sender As Object, ByVal e As ad_userRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub batchRowChangeEventHandler(ByVal sender As Object, ByVal e As batchRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub productRowChangeEventHandler(ByVal sender As Object, ByVal e As productRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Delegate Sub uniquecodeRowChangeEventHandler(ByVal sender As Object, ByVal e As uniquecodeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ad_userDataTable
        Inherits Global.System.Data.TypedTableBase(Of ad_userRow)
        
        Private columnad_user_id As Global.System.Data.DataColumn
        
        Private columnad_client_id As Global.System.Data.DataColumn
        
        Private columnad_org_id As Global.System.Data.DataColumn
        
        Private columncodekey As Global.System.Data.DataColumn
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnpassword As Global.System.Data.DataColumn
        
        Private columnisactive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ad_user"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ad_user_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnad_user_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ad_client_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnad_client_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property ad_org_idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnad_org_id
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property codekeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodekey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property passwordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property isactiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ad_userRow
            Get
                Return CType(Me.Rows(index),ad_userRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event ad_userRowChanging As ad_userRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event ad_userRowChanged As ad_userRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event ad_userRowDeleting As ad_userRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event ad_userRowDeleted As ad_userRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub Addad_userRow(ByVal row As ad_userRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function Addad_userRow(ByVal ad_user_id As Decimal, ByVal ad_client_id As Decimal, ByVal ad_org_id As Decimal, ByVal codekey As String, ByVal name As String, ByVal description As String, ByVal password As String, ByVal isactive As String) As ad_userRow
            Dim rowad_userRow As ad_userRow = CType(Me.NewRow,ad_userRow)
            Dim columnValuesArray() As Object = New Object() {ad_user_id, ad_client_id, ad_org_id, codekey, name, description, password, isactive}
            rowad_userRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowad_userRow)
            Return rowad_userRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByad_user_id(ByVal ad_user_id As Decimal) As ad_userRow
            Return CType(Me.Rows.Find(New Object() {ad_user_id}),ad_userRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ad_userDataTable = CType(MyBase.Clone,ad_userDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ad_userDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnad_user_id = MyBase.Columns("ad_user_id")
            Me.columnad_client_id = MyBase.Columns("ad_client_id")
            Me.columnad_org_id = MyBase.Columns("ad_org_id")
            Me.columncodekey = MyBase.Columns("codekey")
            Me.columnname = MyBase.Columns("name")
            Me.columndescription = MyBase.Columns("description")
            Me.columnpassword = MyBase.Columns("password")
            Me.columnisactive = MyBase.Columns("isactive")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnad_user_id = New Global.System.Data.DataColumn("ad_user_id", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad_user_id)
            Me.columnad_client_id = New Global.System.Data.DataColumn("ad_client_id", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad_client_id)
            Me.columnad_org_id = New Global.System.Data.DataColumn("ad_org_id", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnad_org_id)
            Me.columncodekey = New Global.System.Data.DataColumn("codekey", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodekey)
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnpassword = New Global.System.Data.DataColumn("password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpassword)
            Me.columnisactive = New Global.System.Data.DataColumn("isactive", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisactive)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnad_user_id}, true))
            Me.columnad_user_id.AllowDBNull = false
            Me.columnad_user_id.Unique = true
            Me.columnad_client_id.AllowDBNull = false
            Me.columnad_org_id.AllowDBNull = false
            Me.columncodekey.AllowDBNull = false
            Me.columncodekey.MaxLength = 50
            Me.columnname.AllowDBNull = false
            Me.columnname.MaxLength = 255
            Me.columndescription.MaxLength = 255
            Me.columnpassword.AllowDBNull = false
            Me.columnpassword.MaxLength = 50
            Me.columnisactive.AllowDBNull = false
            Me.columnisactive.MaxLength = 1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function Newad_userRow() As ad_userRow
            Return CType(Me.NewRow,ad_userRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ad_userRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ad_userRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ad_userRowChangedEvent) Is Nothing) Then
                RaiseEvent ad_userRowChanged(Me, New ad_userRowChangeEvent(CType(e.Row,ad_userRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ad_userRowChangingEvent) Is Nothing) Then
                RaiseEvent ad_userRowChanging(Me, New ad_userRowChangeEvent(CType(e.Row,ad_userRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ad_userRowDeletedEvent) Is Nothing) Then
                RaiseEvent ad_userRowDeleted(Me, New ad_userRowChangeEvent(CType(e.Row,ad_userRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ad_userRowDeletingEvent) Is Nothing) Then
                RaiseEvent ad_userRowDeleting(Me, New ad_userRowChangeEvent(CType(e.Row,ad_userRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub Removead_userRow(ByVal row As ad_userRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As red_hiresDataSet = New red_hiresDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ad_userDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class batchDataTable
        Inherits Global.System.Data.TypedTableBase(Of batchRow)
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columncreated As Global.System.Data.DataColumn
        
        Private columnsent As Global.System.Data.DataColumn
        
        Private columnsendconfirmed As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnblockcodecount As Global.System.Data.DataColumn
        
        Private columnqty As Global.System.Data.DataColumn
        
        Private columnendqueue As Global.System.Data.DataColumn
        
        Private columnprintedqty As Global.System.Data.DataColumn
        
        Private columnbatchno As Global.System.Data.DataColumn
        
        Private columnprinterlineid As Global.System.Data.DataColumn
        
        Private columncreatedby As Global.System.Data.DataColumn
        
        Private columnupdated As Global.System.Data.DataColumn
        
        Private columnupdatedby As Global.System.Data.DataColumn
        
        Private columnproductid As Global.System.Data.DataColumn
        
        Private columnisactive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "batch"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property createdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property sentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property sendconfirmedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsendconfirmed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property blockcodecountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnblockcodecount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property qtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property endqueueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnendqueue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property printedqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprintedqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property batchnoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbatchno
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property printerlineidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprinterlineid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property createdbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncreatedby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property updatedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdated
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property updatedbyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupdatedby
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property productidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property isactiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As batchRow
            Get
                Return CType(Me.Rows(index),batchRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event batchRowChanging As batchRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event batchRowChanged As batchRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event batchRowDeleting As batchRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event batchRowDeleted As batchRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddbatchRow(ByVal row As batchRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddbatchRow(ByVal created As Date, ByVal sent As Date, ByVal sendconfirmed As Date, ByVal description As String, ByVal blockcodecount As Integer, ByVal qty As Integer, ByVal endqueue As Integer, ByVal printedqty As Integer, ByVal batchno As String, ByVal printerlineid As Integer, ByVal createdby As Decimal, ByVal updated As Date, ByVal updatedby As Decimal, ByVal productid As Integer, ByVal isactive As Boolean) As batchRow
            Dim rowbatchRow As batchRow = CType(Me.NewRow,batchRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, created, sent, sendconfirmed, description, blockcodecount, qty, endqueue, printedqty, batchno, printerlineid, createdby, updated, updatedby, productid, isactive}
            rowbatchRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowbatchRow)
            Return rowbatchRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByid(ByVal id As Integer) As batchRow
            Return CType(Me.Rows.Find(New Object() {id}),batchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As batchDataTable = CType(MyBase.Clone,batchDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New batchDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnid = MyBase.Columns("id")
            Me.columncreated = MyBase.Columns("created")
            Me.columnsent = MyBase.Columns("sent")
            Me.columnsendconfirmed = MyBase.Columns("sendconfirmed")
            Me.columndescription = MyBase.Columns("description")
            Me.columnblockcodecount = MyBase.Columns("blockcodecount")
            Me.columnqty = MyBase.Columns("qty")
            Me.columnendqueue = MyBase.Columns("endqueue")
            Me.columnprintedqty = MyBase.Columns("printedqty")
            Me.columnbatchno = MyBase.Columns("batchno")
            Me.columnprinterlineid = MyBase.Columns("printerlineid")
            Me.columncreatedby = MyBase.Columns("createdby")
            Me.columnupdated = MyBase.Columns("updated")
            Me.columnupdatedby = MyBase.Columns("updatedby")
            Me.columnproductid = MyBase.Columns("productid")
            Me.columnisactive = MyBase.Columns("isactive")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columncreated = New Global.System.Data.DataColumn("created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreated)
            Me.columnsent = New Global.System.Data.DataColumn("sent", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsent)
            Me.columnsendconfirmed = New Global.System.Data.DataColumn("sendconfirmed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsendconfirmed)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnblockcodecount = New Global.System.Data.DataColumn("blockcodecount", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnblockcodecount)
            Me.columnqty = New Global.System.Data.DataColumn("qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnqty)
            Me.columnendqueue = New Global.System.Data.DataColumn("endqueue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnendqueue)
            Me.columnprintedqty = New Global.System.Data.DataColumn("printedqty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprintedqty)
            Me.columnbatchno = New Global.System.Data.DataColumn("batchno", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbatchno)
            Me.columnprinterlineid = New Global.System.Data.DataColumn("printerlineid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprinterlineid)
            Me.columncreatedby = New Global.System.Data.DataColumn("createdby", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncreatedby)
            Me.columnupdated = New Global.System.Data.DataColumn("updated", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdated)
            Me.columnupdatedby = New Global.System.Data.DataColumn("updatedby", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupdatedby)
            Me.columnproductid = New Global.System.Data.DataColumn("productid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductid)
            Me.columnisactive = New Global.System.Data.DataColumn("isactive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisactive)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columncreated.AllowDBNull = false
            Me.columndescription.MaxLength = 255
            Me.columnblockcodecount.AllowDBNull = false
            Me.columnqty.AllowDBNull = false
            Me.columnendqueue.AllowDBNull = false
            Me.columnprintedqty.AllowDBNull = false
            Me.columnbatchno.MaxLength = 50
            Me.columnprinterlineid.AllowDBNull = false
            Me.columncreatedby.AllowDBNull = false
            Me.columnupdated.AllowDBNull = false
            Me.columnupdatedby.AllowDBNull = false
            Me.columnproductid.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewbatchRow() As batchRow
            Return CType(Me.NewRow,batchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New batchRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(batchRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.batchRowChangedEvent) Is Nothing) Then
                RaiseEvent batchRowChanged(Me, New batchRowChangeEvent(CType(e.Row,batchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.batchRowChangingEvent) Is Nothing) Then
                RaiseEvent batchRowChanging(Me, New batchRowChangeEvent(CType(e.Row,batchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.batchRowDeletedEvent) Is Nothing) Then
                RaiseEvent batchRowDeleted(Me, New batchRowChangeEvent(CType(e.Row,batchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.batchRowDeletingEvent) Is Nothing) Then
                RaiseEvent batchRowDeleting(Me, New batchRowChangeEvent(CType(e.Row,batchRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemovebatchRow(ByVal row As batchRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As red_hiresDataSet = New red_hiresDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "batchDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class productDataTable
        Inherits Global.System.Data.TypedTableBase(Of productRow)
        
        Private columnname As Global.System.Data.DataColumn
        
        Private columnreceived As Global.System.Data.DataColumn
        
        Private columndescription As Global.System.Data.DataColumn
        
        Private columnupc As Global.System.Data.DataColumn
        
        Private columnmaxbuffer As Global.System.Data.DataColumn
        
        Private columnlocalminlevel As Global.System.Data.DataColumn
        
        Private columnlocalmaxlevel As Global.System.Data.DataColumn
        
        Private columncodekey As Global.System.Data.DataColumn
        
        Private columnendqueue As Global.System.Data.DataColumn
        
        Private columnavailableqty As Global.System.Data.DataColumn
        
        Private columnisactive As Global.System.Data.DataColumn
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columncardboardwidth As Global.System.Data.DataColumn
        
        Private columncardboardlength As Global.System.Data.DataColumn
        
        Private columnwidthallowance As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "product"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property nameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnname
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property receivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreceived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property descriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property upcColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnupc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property maxbufferColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmaxbuffer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property localminlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlocalminlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property localmaxlevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlocalmaxlevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property codekeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncodekey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property endqueueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnendqueue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property availableqtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnavailableqty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property isactiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cardboardwidthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncardboardwidth
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property cardboardlengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncardboardlength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property widthallowanceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnwidthallowance
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As productRow
            Get
                Return CType(Me.Rows(index),productRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productRowChanging As productRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productRowChanged As productRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productRowDeleting As productRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event productRowDeleted As productRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AddproductRow(ByVal row As productRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AddproductRow(ByVal name As String, ByVal received As Date, ByVal description As String, ByVal upc As String, ByVal maxbuffer As Integer, ByVal localminlevel As Integer, ByVal localmaxlevel As Integer, ByVal codekey As String, ByVal endqueue As Integer, ByVal availableqty As Integer, ByVal isactive As Boolean, ByVal cardboardwidth As Decimal, ByVal cardboardlength As Decimal, ByVal widthallowance As Decimal) As productRow
            Dim rowproductRow As productRow = CType(Me.NewRow,productRow)
            Dim columnValuesArray() As Object = New Object() {name, received, description, upc, maxbuffer, localminlevel, localmaxlevel, codekey, endqueue, availableqty, isactive, Nothing, cardboardwidth, cardboardlength, widthallowance}
            rowproductRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowproductRow)
            Return rowproductRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByid(ByVal id As Integer) As productRow
            Return CType(Me.Rows.Find(New Object() {id}),productRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As productDataTable = CType(MyBase.Clone,productDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New productDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnname = MyBase.Columns("name")
            Me.columnreceived = MyBase.Columns("received")
            Me.columndescription = MyBase.Columns("description")
            Me.columnupc = MyBase.Columns("upc")
            Me.columnmaxbuffer = MyBase.Columns("maxbuffer")
            Me.columnlocalminlevel = MyBase.Columns("localminlevel")
            Me.columnlocalmaxlevel = MyBase.Columns("localmaxlevel")
            Me.columncodekey = MyBase.Columns("codekey")
            Me.columnendqueue = MyBase.Columns("endqueue")
            Me.columnavailableqty = MyBase.Columns("availableqty")
            Me.columnisactive = MyBase.Columns("isactive")
            Me.columnid = MyBase.Columns("id")
            Me.columncardboardwidth = MyBase.Columns("cardboardwidth")
            Me.columncardboardlength = MyBase.Columns("cardboardlength")
            Me.columnwidthallowance = MyBase.Columns("widthallowance")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnname = New Global.System.Data.DataColumn("name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnname)
            Me.columnreceived = New Global.System.Data.DataColumn("received", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreceived)
            Me.columndescription = New Global.System.Data.DataColumn("description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescription)
            Me.columnupc = New Global.System.Data.DataColumn("upc", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnupc)
            Me.columnmaxbuffer = New Global.System.Data.DataColumn("maxbuffer", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmaxbuffer)
            Me.columnlocalminlevel = New Global.System.Data.DataColumn("localminlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlocalminlevel)
            Me.columnlocalmaxlevel = New Global.System.Data.DataColumn("localmaxlevel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlocalmaxlevel)
            Me.columncodekey = New Global.System.Data.DataColumn("codekey", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncodekey)
            Me.columnendqueue = New Global.System.Data.DataColumn("endqueue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnendqueue)
            Me.columnavailableqty = New Global.System.Data.DataColumn("availableqty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnavailableqty)
            Me.columnisactive = New Global.System.Data.DataColumn("isactive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisactive)
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columncardboardwidth = New Global.System.Data.DataColumn("cardboardwidth", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncardboardwidth)
            Me.columncardboardlength = New Global.System.Data.DataColumn("cardboardlength", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncardboardlength)
            Me.columnwidthallowance = New Global.System.Data.DataColumn("widthallowance", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnwidthallowance)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnname.AllowDBNull = false
            Me.columnname.MaxLength = 255
            Me.columndescription.MaxLength = 255
            Me.columnupc.MaxLength = 30
            Me.columnmaxbuffer.AllowDBNull = false
            Me.columnlocalminlevel.AllowDBNull = false
            Me.columnlocalmaxlevel.AllowDBNull = false
            Me.columncodekey.AllowDBNull = false
            Me.columncodekey.MaxLength = 45
            Me.columnavailableqty.AllowDBNull = false
            Me.columnisactive.AllowDBNull = false
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewproductRow() As productRow
            Return CType(Me.NewRow,productRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New productRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(productRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.productRowChangedEvent) Is Nothing) Then
                RaiseEvent productRowChanged(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.productRowChangingEvent) Is Nothing) Then
                RaiseEvent productRowChanging(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.productRowDeletedEvent) Is Nothing) Then
                RaiseEvent productRowDeleted(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.productRowDeletingEvent) Is Nothing) Then
                RaiseEvent productRowDeleting(Me, New productRowChangeEvent(CType(e.Row,productRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveproductRow(ByVal row As productRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As red_hiresDataSet = New red_hiresDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "productDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class uniquecodeDataTable
        Inherits Global.System.Data.TypedTableBase(Of uniquecodeRow)
        
        Private columnproductid As Global.System.Data.DataColumn
        
        Private columnuniquecode As Global.System.Data.DataColumn
        
        Private columnprinted As Global.System.Data.DataColumn
        
        Private columnreceived As Global.System.Data.DataColumn
        
        Private columnbatchid As Global.System.Data.DataColumn
        
        Private columnsent As Global.System.Data.DataColumn
        
        Private columnsendconfirmed As Global.System.Data.DataColumn
        
        Private columnbuffered As Global.System.Data.DataColumn
        
        Private columnprinterlineid As Global.System.Data.DataColumn
        
        Private columnmarkingprinterid As Global.System.Data.DataColumn
        
        Private columnid As Global.System.Data.DataColumn
        
        Private columnisactive As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "uniquecode"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property productidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnproductid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property uniquecodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuniquecode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property printedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprinted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property receivedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreceived
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property batchidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbatchid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property sentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property sendconfirmedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsendconfirmed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property bufferedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbuffered
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property printerlineidColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprinterlineid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property markingprinteridColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmarkingprinterid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property idColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property isactiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnisactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As uniquecodeRow
            Get
                Return CType(Me.Rows(index),uniquecodeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event uniquecodeRowChanging As uniquecodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event uniquecodeRowChanged As uniquecodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event uniquecodeRowDeleting As uniquecodeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Event uniquecodeRowDeleted As uniquecodeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Sub AdduniquecodeRow(ByVal row As uniquecodeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overloads Function AdduniquecodeRow(ByVal productid As Integer, ByVal uniquecode As String, ByVal printed As Date, ByVal received As Date, ByVal batchid As Integer, ByVal sent As Date, ByVal sendconfirmed As Date, ByVal buffered As Date, ByVal printerlineid As Integer, ByVal markingprinterid As Integer, ByVal isactive As Boolean) As uniquecodeRow
            Dim rowuniquecodeRow As uniquecodeRow = CType(Me.NewRow,uniquecodeRow)
            Dim columnValuesArray() As Object = New Object() {productid, uniquecode, printed, received, batchid, sent, sendconfirmed, buffered, printerlineid, markingprinterid, Nothing, isactive}
            rowuniquecodeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowuniquecodeRow)
            Return rowuniquecodeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function FindByid(ByVal id As Integer) As uniquecodeRow
            Return CType(Me.Rows.Find(New Object() {id}),uniquecodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As uniquecodeDataTable = CType(MyBase.Clone,uniquecodeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New uniquecodeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnproductid = MyBase.Columns("productid")
            Me.columnuniquecode = MyBase.Columns("uniquecode")
            Me.columnprinted = MyBase.Columns("printed")
            Me.columnreceived = MyBase.Columns("received")
            Me.columnbatchid = MyBase.Columns("batchid")
            Me.columnsent = MyBase.Columns("sent")
            Me.columnsendconfirmed = MyBase.Columns("sendconfirmed")
            Me.columnbuffered = MyBase.Columns("buffered")
            Me.columnprinterlineid = MyBase.Columns("printerlineid")
            Me.columnmarkingprinterid = MyBase.Columns("markingprinterid")
            Me.columnid = MyBase.Columns("id")
            Me.columnisactive = MyBase.Columns("isactive")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.columnproductid = New Global.System.Data.DataColumn("productid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnproductid)
            Me.columnuniquecode = New Global.System.Data.DataColumn("uniquecode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuniquecode)
            Me.columnprinted = New Global.System.Data.DataColumn("printed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprinted)
            Me.columnreceived = New Global.System.Data.DataColumn("received", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreceived)
            Me.columnbatchid = New Global.System.Data.DataColumn("batchid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbatchid)
            Me.columnsent = New Global.System.Data.DataColumn("sent", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsent)
            Me.columnsendconfirmed = New Global.System.Data.DataColumn("sendconfirmed", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsendconfirmed)
            Me.columnbuffered = New Global.System.Data.DataColumn("buffered", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbuffered)
            Me.columnprinterlineid = New Global.System.Data.DataColumn("printerlineid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprinterlineid)
            Me.columnmarkingprinterid = New Global.System.Data.DataColumn("markingprinterid", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmarkingprinterid)
            Me.columnid = New Global.System.Data.DataColumn("id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid)
            Me.columnisactive = New Global.System.Data.DataColumn("isactive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnisactive)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnid}, true))
            Me.columnuniquecode.AllowDBNull = false
            Me.columnuniquecode.MaxLength = 15
            Me.columnreceived.AllowDBNull = false
            Me.columnid.AutoIncrement = true
            Me.columnid.AutoIncrementSeed = -1
            Me.columnid.AutoIncrementStep = -1
            Me.columnid.AllowDBNull = false
            Me.columnid.Unique = true
            Me.columnisactive.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function NewuniquecodeRow() As uniquecodeRow
            Return CType(Me.NewRow,uniquecodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New uniquecodeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(uniquecodeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.uniquecodeRowChangedEvent) Is Nothing) Then
                RaiseEvent uniquecodeRowChanged(Me, New uniquecodeRowChangeEvent(CType(e.Row,uniquecodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.uniquecodeRowChangingEvent) Is Nothing) Then
                RaiseEvent uniquecodeRowChanging(Me, New uniquecodeRowChangeEvent(CType(e.Row,uniquecodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.uniquecodeRowDeletedEvent) Is Nothing) Then
                RaiseEvent uniquecodeRowDeleted(Me, New uniquecodeRowChangeEvent(CType(e.Row,uniquecodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.uniquecodeRowDeletingEvent) Is Nothing) Then
                RaiseEvent uniquecodeRowDeleting(Me, New uniquecodeRowChangeEvent(CType(e.Row,uniquecodeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub RemoveuniquecodeRow(ByVal row As uniquecodeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As red_hiresDataSet = New red_hiresDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "uniquecodeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class ad_userRow
        Inherits Global.System.Data.DataRow
        
        Private tablead_user As ad_userDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablead_user = CType(Me.Table,ad_userDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ad_user_id() As Decimal
            Get
                Return CType(Me(Me.tablead_user.ad_user_idColumn),Decimal)
            End Get
            Set
                Me(Me.tablead_user.ad_user_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ad_client_id() As Decimal
            Get
                Return CType(Me(Me.tablead_user.ad_client_idColumn),Decimal)
            End Get
            Set
                Me(Me.tablead_user.ad_client_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ad_org_id() As Decimal
            Get
                Return CType(Me(Me.tablead_user.ad_org_idColumn),Decimal)
            End Get
            Set
                Me(Me.tablead_user.ad_org_idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property codekey() As String
            Get
                Return CType(Me(Me.tablead_user.codekeyColumn),String)
            End Get
            Set
                Me(Me.tablead_user.codekeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tablead_user.nameColumn),String)
            End Get
            Set
                Me(Me.tablead_user.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tablead_user.descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'description' in table 'ad_user' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablead_user.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property password() As String
            Get
                Return CType(Me(Me.tablead_user.passwordColumn),String)
            End Get
            Set
                Me(Me.tablead_user.passwordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property isactive() As String
            Get
                Return CType(Me(Me.tablead_user.isactiveColumn),String)
            End Get
            Set
                Me(Me.tablead_user.isactiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablead_user.descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetdescriptionNull()
            Me(Me.tablead_user.descriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class batchRow
        Inherits Global.System.Data.DataRow
        
        Private tablebatch As batchDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablebatch = CType(Me.Table,batchDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tablebatch.idColumn),Integer)
            End Get
            Set
                Me(Me.tablebatch.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property created() As Date
            Get
                Return CType(Me(Me.tablebatch.createdColumn),Date)
            End Get
            Set
                Me(Me.tablebatch.createdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property sent() As Date
            Get
                Try 
                    Return CType(Me(Me.tablebatch.sentColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sent' in table 'batch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebatch.sentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property sendconfirmed() As Date
            Get
                Try 
                    Return CType(Me(Me.tablebatch.sendconfirmedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sendconfirmed' in table 'batch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebatch.sendconfirmedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tablebatch.descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'description' in table 'batch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebatch.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property blockcodecount() As Integer
            Get
                Return CType(Me(Me.tablebatch.blockcodecountColumn),Integer)
            End Get
            Set
                Me(Me.tablebatch.blockcodecountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property qty() As Integer
            Get
                Return CType(Me(Me.tablebatch.qtyColumn),Integer)
            End Get
            Set
                Me(Me.tablebatch.qtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property endqueue() As Integer
            Get
                Return CType(Me(Me.tablebatch.endqueueColumn),Integer)
            End Get
            Set
                Me(Me.tablebatch.endqueueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property printedqty() As Integer
            Get
                Return CType(Me(Me.tablebatch.printedqtyColumn),Integer)
            End Get
            Set
                Me(Me.tablebatch.printedqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property batchno() As String
            Get
                Try 
                    Return CType(Me(Me.tablebatch.batchnoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'batchno' in table 'batch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebatch.batchnoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property printerlineid() As Integer
            Get
                Return CType(Me(Me.tablebatch.printerlineidColumn),Integer)
            End Get
            Set
                Me(Me.tablebatch.printerlineidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property createdby() As Decimal
            Get
                Return CType(Me(Me.tablebatch.createdbyColumn),Decimal)
            End Get
            Set
                Me(Me.tablebatch.createdbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property updated() As Date
            Get
                Return CType(Me(Me.tablebatch.updatedColumn),Date)
            End Get
            Set
                Me(Me.tablebatch.updatedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property updatedby() As Decimal
            Get
                Return CType(Me(Me.tablebatch.updatedbyColumn),Decimal)
            End Get
            Set
                Me(Me.tablebatch.updatedbyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property productid() As Integer
            Get
                Return CType(Me(Me.tablebatch.productidColumn),Integer)
            End Get
            Set
                Me(Me.tablebatch.productidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property isactive() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablebatch.isactiveColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'isactive' in table 'batch' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablebatch.isactiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IssentNull() As Boolean
            Return Me.IsNull(Me.tablebatch.sentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetsentNull()
            Me(Me.tablebatch.sentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IssendconfirmedNull() As Boolean
            Return Me.IsNull(Me.tablebatch.sendconfirmedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetsendconfirmedNull()
            Me(Me.tablebatch.sendconfirmedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tablebatch.descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetdescriptionNull()
            Me(Me.tablebatch.descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsbatchnoNull() As Boolean
            Return Me.IsNull(Me.tablebatch.batchnoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetbatchnoNull()
            Me(Me.tablebatch.batchnoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsisactiveNull() As Boolean
            Return Me.IsNull(Me.tablebatch.isactiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetisactiveNull()
            Me(Me.tablebatch.isactiveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class productRow
        Inherits Global.System.Data.DataRow
        
        Private tableproduct As productDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableproduct = CType(Me.Table,productDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property name() As String
            Get
                Return CType(Me(Me.tableproduct.nameColumn),String)
            End Get
            Set
                Me(Me.tableproduct.nameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property received() As Date
            Get
                Try 
                    Return CType(Me(Me.tableproduct.receivedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'received' in table 'product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.receivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property description() As String
            Get
                Try 
                    Return CType(Me(Me.tableproduct.descriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'description' in table 'product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.descriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property upc() As String
            Get
                Try 
                    Return CType(Me(Me.tableproduct.upcColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'upc' in table 'product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.upcColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property maxbuffer() As Integer
            Get
                Return CType(Me(Me.tableproduct.maxbufferColumn),Integer)
            End Get
            Set
                Me(Me.tableproduct.maxbufferColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property localminlevel() As Integer
            Get
                Return CType(Me(Me.tableproduct.localminlevelColumn),Integer)
            End Get
            Set
                Me(Me.tableproduct.localminlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property localmaxlevel() As Integer
            Get
                Return CType(Me(Me.tableproduct.localmaxlevelColumn),Integer)
            End Get
            Set
                Me(Me.tableproduct.localmaxlevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property codekey() As String
            Get
                Return CType(Me(Me.tableproduct.codekeyColumn),String)
            End Get
            Set
                Me(Me.tableproduct.codekeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property endqueue() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableproduct.endqueueColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'endqueue' in table 'product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.endqueueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property availableqty() As Integer
            Get
                Return CType(Me(Me.tableproduct.availableqtyColumn),Integer)
            End Get
            Set
                Me(Me.tableproduct.availableqtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property isactive() As Boolean
            Get
                Return CType(Me(Me.tableproduct.isactiveColumn),Boolean)
            End Get
            Set
                Me(Me.tableproduct.isactiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableproduct.idColumn),Integer)
            End Get
            Set
                Me(Me.tableproduct.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cardboardwidth() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableproduct.cardboardwidthColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cardboardwidth' in table 'product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.cardboardwidthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property cardboardlength() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableproduct.cardboardlengthColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'cardboardlength' in table 'product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.cardboardlengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property widthallowance() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableproduct.widthallowanceColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'widthallowance' in table 'product' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableproduct.widthallowanceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsreceivedNull() As Boolean
            Return Me.IsNull(Me.tableproduct.receivedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetreceivedNull()
            Me(Me.tableproduct.receivedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsdescriptionNull() As Boolean
            Return Me.IsNull(Me.tableproduct.descriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetdescriptionNull()
            Me(Me.tableproduct.descriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsupcNull() As Boolean
            Return Me.IsNull(Me.tableproduct.upcColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetupcNull()
            Me(Me.tableproduct.upcColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsendqueueNull() As Boolean
            Return Me.IsNull(Me.tableproduct.endqueueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetendqueueNull()
            Me(Me.tableproduct.endqueueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IscardboardwidthNull() As Boolean
            Return Me.IsNull(Me.tableproduct.cardboardwidthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetcardboardwidthNull()
            Me(Me.tableproduct.cardboardwidthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IscardboardlengthNull() As Boolean
            Return Me.IsNull(Me.tableproduct.cardboardlengthColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetcardboardlengthNull()
            Me(Me.tableproduct.cardboardlengthColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IswidthallowanceNull() As Boolean
            Return Me.IsNull(Me.tableproduct.widthallowanceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetwidthallowanceNull()
            Me(Me.tableproduct.widthallowanceColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class uniquecodeRow
        Inherits Global.System.Data.DataRow
        
        Private tableuniquecode As uniquecodeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableuniquecode = CType(Me.Table,uniquecodeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property productid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.productidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'productid' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.productidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property uniquecode() As String
            Get
                Return CType(Me(Me.tableuniquecode.uniquecodeColumn),String)
            End Get
            Set
                Me(Me.tableuniquecode.uniquecodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property printed() As Date
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.printedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'printed' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.printedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property received() As Date
            Get
                Return CType(Me(Me.tableuniquecode.receivedColumn),Date)
            End Get
            Set
                Me(Me.tableuniquecode.receivedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property batchid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.batchidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'batchid' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.batchidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property sent() As Date
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.sentColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sent' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.sentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property sendconfirmed() As Date
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.sendconfirmedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sendconfirmed' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.sendconfirmedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property buffered() As Date
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.bufferedColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'buffered' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.bufferedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property printerlineid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.printerlineidColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'printerlineid' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.printerlineidColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property markingprinterid() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableuniquecode.markingprinteridColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'markingprinterid' in table 'uniquecode' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableuniquecode.markingprinteridColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property id() As Integer
            Get
                Return CType(Me(Me.tableuniquecode.idColumn),Integer)
            End Get
            Set
                Me(Me.tableuniquecode.idColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property isactive() As Boolean
            Get
                Return CType(Me(Me.tableuniquecode.isactiveColumn),Boolean)
            End Get
            Set
                Me(Me.tableuniquecode.isactiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsproductidNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.productidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetproductidNull()
            Me(Me.tableuniquecode.productidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsprintedNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.printedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetprintedNull()
            Me(Me.tableuniquecode.printedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsbatchidNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.batchidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetbatchidNull()
            Me(Me.tableuniquecode.batchidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IssentNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.sentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetsentNull()
            Me(Me.tableuniquecode.sentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IssendconfirmedNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.sendconfirmedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetsendconfirmedNull()
            Me(Me.tableuniquecode.sendconfirmedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsbufferedNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.bufferedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetbufferedNull()
            Me(Me.tableuniquecode.bufferedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsprinterlineidNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.printerlineidColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetprinterlineidNull()
            Me(Me.tableuniquecode.printerlineidColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Function IsmarkingprinteridNull() As Boolean
            Return Me.IsNull(Me.tableuniquecode.markingprinteridColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub SetmarkingprinteridNull()
            Me(Me.tableuniquecode.markingprinteridColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class ad_userRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ad_userRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As ad_userRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As ad_userRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class batchRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As batchRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As batchRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As batchRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class productRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As productRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As productRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As productRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
    Public Class uniquecodeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As uniquecodeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New(ByVal row As uniquecodeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Row() As uniquecodeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace red_hiresDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ad_userTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Npgsql.NpgsqlDataAdapter
        
        Private _connection As Global.Npgsql.NpgsqlConnection
        
        Private _transaction As Global.Npgsql.NpgsqlTransaction
        
        Private _commandCollection() As Global.Npgsql.NpgsqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Npgsql.NpgsqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Npgsql.NpgsqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Npgsql.NpgsqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.Npgsql.NpgsqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Npgsql.NpgsqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Npgsql.NpgsqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ad_user"
            tableMapping.ColumnMappings.Add("ad_user_id", "ad_user_id")
            tableMapping.ColumnMappings.Add("ad_client_id", "ad_client_id")
            tableMapping.ColumnMappings.Add("ad_org_id", "ad_org_id")
            tableMapping.ColumnMappings.Add("codekey", "codekey")
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("password", "password")
            tableMapping.ColumnMappings.Add("isactive", "isactive")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""red_hires"".""public"".""ad_user"" WHERE ((""ad_user_id"" = @Original_ad_us"& _ 
                "er_id) AND (""ad_client_id"" = @Original_ad_client_id) AND (""ad_org_id"" = @Origina"& _ 
                "l_ad_org_id) AND (""codekey"" = @Original_codekey) AND (""name"" = @Original_name) A"& _ 
                "ND ((@IsNull_description = 1 AND ""description"" IS NULL) OR (""description"" = @Ori"& _ 
                "ginal_description)) AND (""password"" = @Original_password) AND (""isactive"" = @Ori"& _ 
                "ginal_isactive))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Npgsql.NpgsqlParameter = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_ad_user_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_user_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_ad_client_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_client_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_ad_org_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_org_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_password"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""red_hires"".""public"".""ad_user"" (""ad_user_id"", ""ad_client_id"", ""ad_org"& _ 
                "_id"", ""codekey"", ""name"", ""description"", ""password"", ""isactive"") VALUES (@ad_user"& _ 
                "_id, @ad_client_id, @ad_org_id, @codekey, @name, @description, @password, @isact"& _ 
                "ive)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@ad_user_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_user_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@ad_client_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_client_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@ad_org_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_org_id"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@password"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "password"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""red_hires"".""public"".""ad_user"" SET ""ad_user_id"" = @ad_user_id, ""ad_client_"& _ 
                "id"" = @ad_client_id, ""ad_org_id"" = @ad_org_id, ""codekey"" = @codekey, ""name"" = @n"& _ 
                "ame, ""description"" = @description, ""password"" = @password, ""isactive"" = @isactiv"& _ 
                "e WHERE ((""ad_user_id"" = @Original_ad_user_id) AND (""ad_client_id"" = @Original_a"& _ 
                "d_client_id) AND (""ad_org_id"" = @Original_ad_org_id) AND (""codekey"" = @Original_"& _ 
                "codekey) AND (""name"" = @Original_name) AND ((@IsNull_description = 1 AND ""descri"& _ 
                "ption"" IS NULL) OR (""description"" = @Original_description)) AND (""password"" = @O"& _ 
                "riginal_password) AND (""isactive"" = @Original_isactive))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@ad_user_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_user_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@ad_client_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_client_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@ad_org_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_org_id"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@password"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "password"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_ad_user_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_user_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_ad_client_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_client_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_ad_org_id"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "ad_org_id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_password"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "password"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Char]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Npgsql.NpgsqlConnection()
            Me._connection.ConnectionString = Global.SerialCom.My.MySettings.Default.red_hiresConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Npgsql.NpgsqlCommand(0) {}
            Me._commandCollection(0) = New Global.Npgsql.NpgsqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""ad_user_id"", ""ad_client_id"", ""ad_org_id"", ""codekey"", ""name"", ""description"& _ 
                """, ""password"", ""isactive"" FROM ""public"".""ad_user"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As red_hiresDataSet.ad_userDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As red_hiresDataSet.ad_userDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As red_hiresDataSet.ad_userDataTable = New red_hiresDataSet.ad_userDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As red_hiresDataSet.ad_userDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As red_hiresDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ad_user")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal __Original_ad_user_id As Decimal, ByVal __Original_ad_client_id As Decimal, ByVal __Original_ad_org_id As Decimal, ByVal __Original_codekey As String, ByVal __Original_name As String, ByVal __Original_description As String, ByVal __Original_password As String, ByVal __Original_isactive As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_ad_user_id,Decimal)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(__Original_ad_client_id,Decimal)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_ad_org_id,Decimal)
            If (__Original_codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_codekey")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(__Original_codekey,String)
            End If
            If (__Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_name,String)
            End If
            If (__Original_description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_description,String)
            End If
            If (__Original_password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_password")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_password,String)
            End If
            If (__Original_isactive Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_isactive")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_isactive,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __ad_user_id As Decimal, ByVal __ad_client_id As Decimal, ByVal __ad_org_id As Decimal, ByVal __codekey As String, ByVal __name As String, ByVal __description As String, ByVal __password As String, ByVal __isactive As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(__ad_user_id,Decimal)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(__ad_client_id,Decimal)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(__ad_org_id,Decimal)
            If (__codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__codekey")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__codekey,String)
            End If
            If (__name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__name")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(__name,String)
            End If
            If (__description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__description,String)
            End If
            If (__password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__password")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__password,String)
            End If
            If (__isactive Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__isactive")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__isactive,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __ad_user_id As Decimal,  _
                    ByVal __ad_client_id As Decimal,  _
                    ByVal __ad_org_id As Decimal,  _
                    ByVal __codekey As String,  _
                    ByVal __name As String,  _
                    ByVal __description As String,  _
                    ByVal __password As String,  _
                    ByVal __isactive As String,  _
                    ByVal __Original_ad_user_id As Decimal,  _
                    ByVal __Original_ad_client_id As Decimal,  _
                    ByVal __Original_ad_org_id As Decimal,  _
                    ByVal __Original_codekey As String,  _
                    ByVal __Original_name As String,  _
                    ByVal __Original_description As String,  _
                    ByVal __Original_password As String,  _
                    ByVal __Original_isactive As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__ad_user_id,Decimal)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__ad_client_id,Decimal)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__ad_org_id,Decimal)
            If (__codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__codekey")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__codekey,String)
            End If
            If (__name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__name")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__name,String)
            End If
            If (__description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__description,String)
            End If
            If (__password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__password")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__password,String)
            End If
            If (__isactive Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__isactive")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__isactive,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__Original_ad_user_id,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__Original_ad_client_id,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__Original_ad_org_id,Decimal)
            If (__Original_codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_codekey")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__Original_codekey,String)
            End If
            If (__Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__Original_name,String)
            End If
            If (__Original_description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__Original_description,String)
            End If
            If (__Original_password Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_password")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__Original_password,String)
            End If
            If (__Original_isactive Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_isactive")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__Original_isactive,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal __ad_client_id As Decimal, ByVal __ad_org_id As Decimal, ByVal __codekey As String, ByVal __name As String, ByVal __description As String, ByVal __password As String, ByVal __isactive As String, ByVal __Original_ad_user_id As Decimal, ByVal __Original_ad_client_id As Decimal, ByVal __Original_ad_org_id As Decimal, ByVal __Original_codekey As String, ByVal __Original_name As String, ByVal __Original_description As String, ByVal __Original_password As String, ByVal __Original_isactive As String) As Integer
            Return Me.Update(__Original_ad_user_id, __ad_client_id, __ad_org_id, __codekey, __name, __description, __password, __isactive, __Original_ad_user_id, __Original_ad_client_id, __Original_ad_org_id, __Original_codekey, __Original_name, __Original_description, __Original_password, __Original_isactive)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class batchTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Npgsql.NpgsqlDataAdapter
        
        Private _connection As Global.Npgsql.NpgsqlConnection
        
        Private _transaction As Global.Npgsql.NpgsqlTransaction
        
        Private _commandCollection() As Global.Npgsql.NpgsqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Npgsql.NpgsqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Npgsql.NpgsqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Npgsql.NpgsqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.Npgsql.NpgsqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Npgsql.NpgsqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Npgsql.NpgsqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "batch"
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("created", "created")
            tableMapping.ColumnMappings.Add("sent", "sent")
            tableMapping.ColumnMappings.Add("sendconfirmed", "sendconfirmed")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("blockcodecount", "blockcodecount")
            tableMapping.ColumnMappings.Add("qty", "qty")
            tableMapping.ColumnMappings.Add("endqueue", "endqueue")
            tableMapping.ColumnMappings.Add("printedqty", "printedqty")
            tableMapping.ColumnMappings.Add("batchno", "batchno")
            tableMapping.ColumnMappings.Add("printerlineid", "printerlineid")
            tableMapping.ColumnMappings.Add("createdby", "createdby")
            tableMapping.ColumnMappings.Add("updated", "updated")
            tableMapping.ColumnMappings.Add("updatedby", "updatedby")
            tableMapping.ColumnMappings.Add("productid", "productid")
            tableMapping.ColumnMappings.Add("isactive", "isactive")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""red_hires"".""public"".""batch"" WHERE ((""id"" = @Original_id) AND (""creat"& _ 
                "ed"" = @Original_created) AND ((@IsNull_sent = 1 AND ""sent"" IS NULL) OR (""sent"" ="& _ 
                " @Original_sent)) AND ((@IsNull_sendconfirmed = 1 AND ""sendconfirmed"" IS NULL) O"& _ 
                "R (""sendconfirmed"" = @Original_sendconfirmed)) AND ((@IsNull_description = 1 AND"& _ 
                " ""description"" IS NULL) OR (""description"" = @Original_description)) AND (""blockc"& _ 
                "odecount"" = @Original_blockcodecount) AND (""qty"" = @Original_qty) AND (""endqueue"& _ 
                """ = @Original_endqueue) AND (""printedqty"" = @Original_printedqty) AND ((@IsNull_"& _ 
                "batchno = 1 AND ""batchno"" IS NULL) OR (""batchno"" = @Original_batchno)) AND (""pri"& _ 
                "nterlineid"" = @Original_printerlineid) AND (""createdby"" = @Original_createdby) A"& _ 
                "ND (""updated"" = @Original_updated) AND (""updatedby"" = @Original_updatedby) AND ("& _ 
                """productid"" = @Original_productid) AND ((@IsNull_isactive = 1 AND ""isactive"" IS "& _ 
                "NULL) OR (""isactive"" = @Original_isactive)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Npgsql.NpgsqlParameter = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sent"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sendconfirmed"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_blockcodecount"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "blockcodecount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printedqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printedqty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_batchno"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_batchno"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "batchno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_createdby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "createdby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_updated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "updated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_updatedby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "updatedby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_isactive"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""red_hires"".""public"".""batch"" (""created"", ""sent"", ""sendconfirmed"", ""de"& _ 
                "scription"", ""blockcodecount"", ""qty"", ""endqueue"", ""printedqty"", ""batchno"", ""print"& _ 
                "erlineid"", ""createdby"", ""updated"", ""updatedby"", ""productid"", ""isactive"") VALUES "& _ 
                "(@created, @sent, @sendconfirmed, @description, @blockcodecount, @qty, @endqueue"& _ 
                ", @printedqty, @batchno, @printerlineid, @createdby, @updated, @updatedby, @prod"& _ 
                "uctid, @isactive)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "created"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@blockcodecount"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "blockcodecount"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printedqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printedqty"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@batchno"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "batchno"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@createdby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "createdby"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@updated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "updated"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@updatedby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "updatedby"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""red_hires"".""public"".""batch"" SET ""created"" = @created, ""sent"" = @sent, ""se"& _ 
                "ndconfirmed"" = @sendconfirmed, ""description"" = @description, ""blockcodecount"" = "& _ 
                "@blockcodecount, ""qty"" = @qty, ""endqueue"" = @endqueue, ""printedqty"" = @printedqt"& _ 
                "y, ""batchno"" = @batchno, ""printerlineid"" = @printerlineid, ""createdby"" = @create"& _ 
                "dby, ""updated"" = @updated, ""updatedby"" = @updatedby, ""productid"" = @productid, """& _ 
                "isactive"" = @isactive WHERE ((""id"" = @Original_id) AND (""created"" = @Original_cr"& _ 
                "eated) AND ((@IsNull_sent = 1 AND ""sent"" IS NULL) OR (""sent"" = @Original_sent)) "& _ 
                "AND ((@IsNull_sendconfirmed = 1 AND ""sendconfirmed"" IS NULL) OR (""sendconfirmed"""& _ 
                " = @Original_sendconfirmed)) AND ((@IsNull_description = 1 AND ""description"" IS "& _ 
                "NULL) OR (""description"" = @Original_description)) AND (""blockcodecount"" = @Origi"& _ 
                "nal_blockcodecount) AND (""qty"" = @Original_qty) AND (""endqueue"" = @Original_endq"& _ 
                "ueue) AND (""printedqty"" = @Original_printedqty) AND ((@IsNull_batchno = 1 AND ""b"& _ 
                "atchno"" IS NULL) OR (""batchno"" = @Original_batchno)) AND (""printerlineid"" = @Ori"& _ 
                "ginal_printerlineid) AND (""createdby"" = @Original_createdby) AND (""updated"" = @O"& _ 
                "riginal_updated) AND (""updatedby"" = @Original_updatedby) AND (""productid"" = @Ori"& _ 
                "ginal_productid) AND ((@IsNull_isactive = 1 AND ""isactive"" IS NULL) OR (""isactiv"& _ 
                "e"" = @Original_isactive)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "created"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@blockcodecount"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "blockcodecount"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printedqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printedqty"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@batchno"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "batchno"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@createdby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "createdby"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@updated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "updated"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@updatedby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "updatedby"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_created"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "created"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sent"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sendconfirmed"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_blockcodecount"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "blockcodecount"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_qty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "qty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printedqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printedqty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_batchno"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_batchno"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "batchno"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_createdby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "createdby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_updated"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "updated"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_updatedby"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "updatedby"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_isactive"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Npgsql.NpgsqlConnection()
            Me._connection.ConnectionString = Global.SerialCom.My.MySettings.Default.red_hiresConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Npgsql.NpgsqlCommand(0) {}
            Me._commandCollection(0) = New Global.Npgsql.NpgsqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""id"", ""created"", ""sent"", ""sendconfirmed"", ""description"", ""blockcodecount"","& _ 
                " ""qty"", ""endqueue"", ""printedqty"", ""batchno"", ""printerlineid"", ""createdby"", ""upda"& _ 
                "ted"", ""updatedby"", ""productid"", ""isactive"" FROM ""public"".""batch"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As red_hiresDataSet.batchDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As red_hiresDataSet.batchDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As red_hiresDataSet.batchDataTable = New red_hiresDataSet.batchDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As red_hiresDataSet.batchDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As red_hiresDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "batch")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal __Original_id As Integer,  _
                    ByVal __Original_created As Date,  _
                    ByVal __Original_sent As Global.System.Nullable(Of Date),  _
                    ByVal __Original_sendconfirmed As Global.System.Nullable(Of Date),  _
                    ByVal __Original_description As String,  _
                    ByVal __Original_blockcodecount As Integer,  _
                    ByVal __Original_qty As Integer,  _
                    ByVal __Original_endqueue As Integer,  _
                    ByVal __Original_printedqty As Integer,  _
                    ByVal __Original_batchno As String,  _
                    ByVal __Original_printerlineid As Integer,  _
                    ByVal __Original_createdby As Decimal,  _
                    ByVal __Original_updated As Date,  _
                    ByVal __Original_updatedby As Decimal,  _
                    ByVal __Original_productid As Integer,  _
                    ByVal __Original_isactive As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(__Original_created,Date)
            If (__Original_sent.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(__Original_sent.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (__Original_sendconfirmed.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(__Original_sendconfirmed.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (__Original_description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_description,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_blockcodecount,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(__Original_qty,Integer)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(__Original_endqueue,Integer)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(__Original_printedqty,Integer)
            If (__Original_batchno Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(__Original_batchno,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(__Original_printerlineid,Integer)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(__Original_createdby,Decimal)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(__Original_updated,Date)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(__Original_updatedby,Decimal)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(__Original_productid,Integer)
            If (__Original_isactive.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(__Original_isactive.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __created As Date, ByVal __sent As Global.System.Nullable(Of Date), ByVal __sendconfirmed As Global.System.Nullable(Of Date), ByVal __description As String, ByVal __blockcodecount As Integer, ByVal __qty As Integer, ByVal __endqueue As Integer, ByVal __printedqty As Integer, ByVal __batchno As String, ByVal __printerlineid As Integer, ByVal __createdby As Decimal, ByVal __updated As Date, ByVal __updatedby As Decimal, ByVal __productid As Integer, ByVal __isactive As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(__created,Date)
            If (__sent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__sent.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (__sendconfirmed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__sendconfirmed.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (__description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__description,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(__blockcodecount,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(__qty,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(__endqueue,Integer)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(__printedqty,Integer)
            If (__batchno Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(__batchno,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(__printerlineid,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(__createdby,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(__updated,Date)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(__updatedby,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(__productid,Integer)
            If (__isactive.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(__isactive.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __created As Date,  _
                    ByVal __sent As Global.System.Nullable(Of Date),  _
                    ByVal __sendconfirmed As Global.System.Nullable(Of Date),  _
                    ByVal __description As String,  _
                    ByVal __blockcodecount As Integer,  _
                    ByVal __qty As Integer,  _
                    ByVal __endqueue As Integer,  _
                    ByVal __printedqty As Integer,  _
                    ByVal __batchno As String,  _
                    ByVal __printerlineid As Integer,  _
                    ByVal __createdby As Decimal,  _
                    ByVal __updated As Date,  _
                    ByVal __updatedby As Decimal,  _
                    ByVal __productid As Integer,  _
                    ByVal __isactive As Global.System.Nullable(Of Boolean),  _
                    ByVal __Original_id As Integer,  _
                    ByVal __Original_created As Date,  _
                    ByVal __Original_sent As Global.System.Nullable(Of Date),  _
                    ByVal __Original_sendconfirmed As Global.System.Nullable(Of Date),  _
                    ByVal __Original_description As String,  _
                    ByVal __Original_blockcodecount As Integer,  _
                    ByVal __Original_qty As Integer,  _
                    ByVal __Original_endqueue As Integer,  _
                    ByVal __Original_printedqty As Integer,  _
                    ByVal __Original_batchno As String,  _
                    ByVal __Original_printerlineid As Integer,  _
                    ByVal __Original_createdby As Decimal,  _
                    ByVal __Original_updated As Date,  _
                    ByVal __Original_updatedby As Decimal,  _
                    ByVal __Original_productid As Integer,  _
                    ByVal __Original_isactive As Global.System.Nullable(Of Boolean)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__created,Date)
            If (__sent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__sent.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (__sendconfirmed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__sendconfirmed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (__description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__blockcodecount,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__qty,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__endqueue,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__printedqty,Integer)
            If (__batchno Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__batchno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__printerlineid,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__createdby,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__updated,Date)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__updatedby,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__productid,Integer)
            If (__isactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__isactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__Original_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__Original_created,Date)
            If (__Original_sent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__Original_sent.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (__Original_sendconfirmed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__Original_sendconfirmed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (__Original_description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(__Original_description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(__Original_blockcodecount,Integer)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__Original_qty,Integer)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(__Original_endqueue,Integer)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__Original_printedqty,Integer)
            If (__Original_batchno Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(__Original_batchno,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__Original_printerlineid,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(__Original_createdby,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(__Original_updated,Date)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(__Original_updatedby,Decimal)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(__Original_productid,Integer)
            If (__Original_isactive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(__Original_isactive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class productTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Npgsql.NpgsqlDataAdapter
        
        Private _connection As Global.Npgsql.NpgsqlConnection
        
        Private _transaction As Global.Npgsql.NpgsqlTransaction
        
        Private _commandCollection() As Global.Npgsql.NpgsqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Npgsql.NpgsqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Npgsql.NpgsqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Npgsql.NpgsqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.Npgsql.NpgsqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Npgsql.NpgsqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Npgsql.NpgsqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "product"
            tableMapping.ColumnMappings.Add("name", "name")
            tableMapping.ColumnMappings.Add("received", "received")
            tableMapping.ColumnMappings.Add("description", "description")
            tableMapping.ColumnMappings.Add("upc", "upc")
            tableMapping.ColumnMappings.Add("maxbuffer", "maxbuffer")
            tableMapping.ColumnMappings.Add("localminlevel", "localminlevel")
            tableMapping.ColumnMappings.Add("localmaxlevel", "localmaxlevel")
            tableMapping.ColumnMappings.Add("codekey", "codekey")
            tableMapping.ColumnMappings.Add("endqueue", "endqueue")
            tableMapping.ColumnMappings.Add("availableqty", "availableqty")
            tableMapping.ColumnMappings.Add("isactive", "isactive")
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("cardboardwidth", "cardboardwidth")
            tableMapping.ColumnMappings.Add("cardboardlength", "cardboardlength")
            tableMapping.ColumnMappings.Add("widthallowance", "widthallowance")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""red_hires"".""public"".""product"" WHERE ((""name"" = @Original_name) AND ("& _ 
                "(@IsNull_received = 1 AND ""received"" IS NULL) OR (""received"" = @Original_receive"& _ 
                "d)) AND ((@IsNull_description = 1 AND ""description"" IS NULL) OR (""description"" ="& _ 
                " @Original_description)) AND ((@IsNull_upc = 1 AND ""upc"" IS NULL) OR (""upc"" = @O"& _ 
                "riginal_upc)) AND (""maxbuffer"" = @Original_maxbuffer) AND (""localminlevel"" = @Or"& _ 
                "iginal_localminlevel) AND (""localmaxlevel"" = @Original_localmaxlevel) AND (""code"& _ 
                "key"" = @Original_codekey) AND ((@IsNull_endqueue = 1 AND ""endqueue"" IS NULL) OR "& _ 
                "(""endqueue"" = @Original_endqueue)) AND (""availableqty"" = @Original_availableqty)"& _ 
                " AND (""isactive"" = @Original_isactive) AND (""id"" = @Original_id) AND ((@IsNull_c"& _ 
                "ardboardwidth = 1 AND ""cardboardwidth"" IS NULL) OR (""cardboardwidth"" = @Original"& _ 
                "_cardboardwidth)) AND ((@IsNull_cardboardlength = 1 AND ""cardboardlength"" IS NUL"& _ 
                "L) OR (""cardboardlength"" = @Original_cardboardlength)) AND ((@IsNull_widthallowa"& _ 
                "nce = 1 AND ""widthallowance"" IS NULL) OR (""widthallowance"" = @Original_widthallo"& _ 
                "wance)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Npgsql.NpgsqlParameter = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_received"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "received"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_upc"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "upc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_upc"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "upc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_maxbuffer"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "maxbuffer"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_localminlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localminlevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_localmaxlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localmaxlevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_availableqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "availableqty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_cardboardwidth"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "cardboardwidth"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_cardboardwidth"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardwidth"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_cardboardlength"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "cardboardlength"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_cardboardlength"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardlength"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_widthallowance"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "widthallowance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_widthallowance"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "widthallowance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""red_hires"".""public"".""product"" (""name"", ""received"", ""description"", ""u"& _ 
                "pc"", ""maxbuffer"", ""localminlevel"", ""localmaxlevel"", ""codekey"", ""endqueue"", ""avai"& _ 
                "lableqty"", ""isactive"", ""cardboardwidth"", ""cardboardlength"", ""widthallowance"") VA"& _ 
                "LUES (@name, @received, @description, @upc, @maxbuffer, @localminlevel, @localma"& _ 
                "xlevel, @codekey, @endqueue, @availableqty, @isactive, @cardboardwidth, @cardboa"& _ 
                "rdlength, @widthallowance)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@upc"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "upc"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@maxbuffer"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "maxbuffer"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@localminlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localminlevel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@localmaxlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localmaxlevel"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@availableqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "availableqty"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@cardboardwidth"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardwidth"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@cardboardlength"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardlength"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@widthallowance"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "widthallowance"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""red_hires"".""public"".""product"" SET ""name"" = @name, ""received"" = @received,"& _ 
                " ""description"" = @description, ""upc"" = @upc, ""maxbuffer"" = @maxbuffer, ""localmin"& _ 
                "level"" = @localminlevel, ""localmaxlevel"" = @localmaxlevel, ""codekey"" = @codekey,"& _ 
                " ""endqueue"" = @endqueue, ""availableqty"" = @availableqty, ""isactive"" = @isactive,"& _ 
                " ""cardboardwidth"" = @cardboardwidth, ""cardboardlength"" = @cardboardlength, ""widt"& _ 
                "hallowance"" = @widthallowance WHERE ((""name"" = @Original_name) AND ((@IsNull_rec"& _ 
                "eived = 1 AND ""received"" IS NULL) OR (""received"" = @Original_received)) AND ((@I"& _ 
                "sNull_description = 1 AND ""description"" IS NULL) OR (""description"" = @Original_d"& _ 
                "escription)) AND ((@IsNull_upc = 1 AND ""upc"" IS NULL) OR (""upc"" = @Original_upc)"& _ 
                ") AND (""maxbuffer"" = @Original_maxbuffer) AND (""localminlevel"" = @Original_local"& _ 
                "minlevel) AND (""localmaxlevel"" = @Original_localmaxlevel) AND (""codekey"" = @Orig"& _ 
                "inal_codekey) AND ((@IsNull_endqueue = 1 AND ""endqueue"" IS NULL) OR (""endqueue"" "& _ 
                "= @Original_endqueue)) AND (""availableqty"" = @Original_availableqty) AND (""isact"& _ 
                "ive"" = @Original_isactive) AND (""id"" = @Original_id) AND ((@IsNull_cardboardwidt"& _ 
                "h = 1 AND ""cardboardwidth"" IS NULL) OR (""cardboardwidth"" = @Original_cardboardwi"& _ 
                "dth)) AND ((@IsNull_cardboardlength = 1 AND ""cardboardlength"" IS NULL) OR (""card"& _ 
                "boardlength"" = @Original_cardboardlength)) AND ((@IsNull_widthallowance = 1 AND "& _ 
                """widthallowance"" IS NULL) OR (""widthallowance"" = @Original_widthallowance)))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@upc"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "upc"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@maxbuffer"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "maxbuffer"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@localminlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localminlevel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@localmaxlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localmaxlevel"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@availableqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "availableqty"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@cardboardwidth"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardwidth"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@cardboardlength"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardlength"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@widthallowance"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "widthallowance"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_name"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "name"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_received"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "received"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_description"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_description"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "description"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_upc"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "upc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_upc"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "upc"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_maxbuffer"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "maxbuffer"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_localminlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localminlevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_localmaxlevel"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "localmaxlevel"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_codekey"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "codekey"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_endqueue"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "endqueue"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_availableqty"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "availableqty"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_cardboardwidth"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "cardboardwidth"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_cardboardwidth"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardwidth"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_cardboardlength"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "cardboardlength"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_cardboardlength"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "cardboardlength"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_widthallowance"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "widthallowance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_widthallowance"
            param.DbType = Global.System.Data.DbType.[Decimal]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Numeric
            param.IsNullable = true
            param.SourceColumn = "widthallowance"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Npgsql.NpgsqlConnection()
            Me._connection.ConnectionString = Global.SerialCom.My.MySettings.Default.red_hiresConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Npgsql.NpgsqlCommand(0) {}
            Me._commandCollection(0) = New Global.Npgsql.NpgsqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""name"", ""received"", ""description"", ""upc"", ""maxbuffer"", ""localminlevel"", ""l"& _ 
                "ocalmaxlevel"", ""codekey"", ""endqueue"", ""availableqty"", ""isactive"", ""id"", ""cardboa"& _ 
                "rdwidth"", ""cardboardlength"", ""widthallowance"" FROM ""public"".""product"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As red_hiresDataSet.productDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As red_hiresDataSet.productDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As red_hiresDataSet.productDataTable = New red_hiresDataSet.productDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As red_hiresDataSet.productDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As red_hiresDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "product")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal __Original_name As String, ByVal __Original_received As Global.System.Nullable(Of Date), ByVal __Original_description As String, ByVal __Original_upc As String, ByVal __Original_maxbuffer As Integer, ByVal __Original_localminlevel As Integer, ByVal __Original_localmaxlevel As Integer, ByVal __Original_codekey As String, ByVal __Original_endqueue As Global.System.Nullable(Of Integer), ByVal __Original_availableqty As Integer, ByVal __Original_isactive As Boolean, ByVal __Original_id As Integer, ByVal __Original_cardboardwidth As Global.System.Nullable(Of Decimal), ByVal __Original_cardboardlength As Global.System.Nullable(Of Decimal), ByVal __Original_widthallowance As Global.System.Nullable(Of Decimal)) As Integer
            If (__Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_name")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(__Original_name,String)
            End If
            If (__Original_received.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_received.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (__Original_description Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_description,String)
            End If
            If (__Original_upc Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(__Original_upc,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_maxbuffer,Integer)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(__Original_localminlevel,Integer)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(__Original_localmaxlevel,Integer)
            If (__Original_codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_codekey")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(__Original_codekey,String)
            End If
            If (__Original_endqueue.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(__Original_endqueue.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(__Original_availableqty,Integer)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(__Original_isactive,Boolean)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(__Original_id,Integer)
            If (__Original_cardboardwidth.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(__Original_cardboardwidth.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (__Original_cardboardlength.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(__Original_cardboardlength.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (__Original_widthallowance.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(__Original_widthallowance.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __name As String, ByVal __received As Global.System.Nullable(Of Date), ByVal __description As String, ByVal __upc As String, ByVal __maxbuffer As Integer, ByVal __localminlevel As Integer, ByVal __localmaxlevel As Integer, ByVal __codekey As String, ByVal __endqueue As Global.System.Nullable(Of Integer), ByVal __availableqty As Integer, ByVal __isactive As Boolean, ByVal __cardboardwidth As Global.System.Nullable(Of Decimal), ByVal __cardboardlength As Global.System.Nullable(Of Decimal), ByVal __widthallowance As Global.System.Nullable(Of Decimal)) As Integer
            If (__name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__name")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__name,String)
            End If
            If (__received.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__received.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (__description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__description,String)
            End If
            If (__upc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(__upc,String)
            End If
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(__maxbuffer,Integer)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(__localminlevel,Integer)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(__localmaxlevel,Integer)
            If (__codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__codekey")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__codekey,String)
            End If
            If (__endqueue.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(__endqueue.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(__availableqty,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(__isactive,Boolean)
            If (__cardboardwidth.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(__cardboardwidth.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (__cardboardlength.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(__cardboardlength.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (__widthallowance.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(__widthallowance.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __name As String,  _
                    ByVal __received As Global.System.Nullable(Of Date),  _
                    ByVal __description As String,  _
                    ByVal __upc As String,  _
                    ByVal __maxbuffer As Integer,  _
                    ByVal __localminlevel As Integer,  _
                    ByVal __localmaxlevel As Integer,  _
                    ByVal __codekey As String,  _
                    ByVal __endqueue As Global.System.Nullable(Of Integer),  _
                    ByVal __availableqty As Integer,  _
                    ByVal __isactive As Boolean,  _
                    ByVal __cardboardwidth As Global.System.Nullable(Of Decimal),  _
                    ByVal __cardboardlength As Global.System.Nullable(Of Decimal),  _
                    ByVal __widthallowance As Global.System.Nullable(Of Decimal),  _
                    ByVal __Original_name As String,  _
                    ByVal __Original_received As Global.System.Nullable(Of Date),  _
                    ByVal __Original_description As String,  _
                    ByVal __Original_upc As String,  _
                    ByVal __Original_maxbuffer As Integer,  _
                    ByVal __Original_localminlevel As Integer,  _
                    ByVal __Original_localmaxlevel As Integer,  _
                    ByVal __Original_codekey As String,  _
                    ByVal __Original_endqueue As Global.System.Nullable(Of Integer),  _
                    ByVal __Original_availableqty As Integer,  _
                    ByVal __Original_isactive As Boolean,  _
                    ByVal __Original_id As Integer,  _
                    ByVal __Original_cardboardwidth As Global.System.Nullable(Of Decimal),  _
                    ByVal __Original_cardboardlength As Global.System.Nullable(Of Decimal),  _
                    ByVal __Original_widthallowance As Global.System.Nullable(Of Decimal)) As Integer
            If (__name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__name")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__name,String)
            End If
            If (__received.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__received.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (__description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__description,String)
            End If
            If (__upc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__upc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__maxbuffer,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__localminlevel,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__localmaxlevel,Integer)
            If (__codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__codekey")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__codekey,String)
            End If
            If (__endqueue.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__endqueue.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__availableqty,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__isactive,Boolean)
            If (__cardboardwidth.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(__cardboardwidth.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (__cardboardlength.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__cardboardlength.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (__widthallowance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__widthallowance.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (__Original_name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_name")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(__Original_name,String)
            End If
            If (__Original_received.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__Original_received.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (__Original_description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__Original_description,String)
            End If
            If (__Original_upc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__Original_upc,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(__Original_maxbuffer,Integer)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(__Original_localminlevel,Integer)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(__Original_localmaxlevel,Integer)
            If (__Original_codekey Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_codekey")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__Original_codekey,String)
            End If
            If (__Original_endqueue.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__Original_endqueue.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(__Original_availableqty,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(__Original_isactive,Boolean)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__Original_id,Integer)
            If (__Original_cardboardwidth.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(__Original_cardboardwidth.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (__Original_cardboardlength.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(__Original_cardboardlength.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            End If
            If (__Original_widthallowance.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(__Original_widthallowance.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class uniquecodeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.Npgsql.NpgsqlDataAdapter
        
        Private _connection As Global.Npgsql.NpgsqlConnection
        
        Private _transaction As Global.Npgsql.NpgsqlTransaction
        
        Private _commandCollection() As Global.Npgsql.NpgsqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.Npgsql.NpgsqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Connection() As Global.Npgsql.NpgsqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.Npgsql.NpgsqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Property Transaction() As Global.Npgsql.NpgsqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.Npgsql.NpgsqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.Npgsql.NpgsqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "uniquecode"
            tableMapping.ColumnMappings.Add("productid", "productid")
            tableMapping.ColumnMappings.Add("uniquecode", "uniquecode")
            tableMapping.ColumnMappings.Add("printed", "printed")
            tableMapping.ColumnMappings.Add("received", "received")
            tableMapping.ColumnMappings.Add("batchid", "batchid")
            tableMapping.ColumnMappings.Add("sent", "sent")
            tableMapping.ColumnMappings.Add("sendconfirmed", "sendconfirmed")
            tableMapping.ColumnMappings.Add("buffered", "buffered")
            tableMapping.ColumnMappings.Add("printerlineid", "printerlineid")
            tableMapping.ColumnMappings.Add("markingprinterid", "markingprinterid")
            tableMapping.ColumnMappings.Add("id", "id")
            tableMapping.ColumnMappings.Add("isactive", "isactive")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM ""red_hires"".""public"".""uniquecode"" WHERE (((@IsNull_productid = 1 AND "& _ 
                """productid"" IS NULL) OR (""productid"" = @Original_productid)) AND (""uniquecode"" ="& _ 
                " @Original_uniquecode) AND ((@IsNull_printed = 1 AND ""printed"" IS NULL) OR (""pri"& _ 
                "nted"" = @Original_printed)) AND (""received"" = @Original_received) AND ((@IsNull_"& _ 
                "batchid = 1 AND ""batchid"" IS NULL) OR (""batchid"" = @Original_batchid)) AND ((@Is"& _ 
                "Null_sent = 1 AND ""sent"" IS NULL) OR (""sent"" = @Original_sent)) AND ((@IsNull_se"& _ 
                "ndconfirmed = 1 AND ""sendconfirmed"" IS NULL) OR (""sendconfirmed"" = @Original_sen"& _ 
                "dconfirmed)) AND ((@IsNull_buffered = 1 AND ""buffered"" IS NULL) OR (""buffered"" ="& _ 
                " @Original_buffered)) AND ((@IsNull_printerlineid = 1 AND ""printerlineid"" IS NUL"& _ 
                "L) OR (""printerlineid"" = @Original_printerlineid)) AND ((@IsNull_markingprinteri"& _ 
                "d = 1 AND ""markingprinterid"" IS NULL) OR (""markingprinterid"" = @Original_marking"& _ 
                "printerid)) AND (""id"" = @Original_id) AND (""isactive"" = @Original_isactive))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.Npgsql.NpgsqlParameter = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_uniquecode"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "uniquecode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_printed"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "printed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_batchid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_batchid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sent"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sendconfirmed"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_buffered"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "buffered"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_buffered"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "buffered"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_markingprinterid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "markingprinterid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_markingprinterid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "markingprinterid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO ""red_hires"".""public"".""uniquecode"" (""productid"", ""uniquecode"", ""printe"& _ 
                "d"", ""received"", ""batchid"", ""sent"", ""sendconfirmed"", ""buffered"", ""printerlineid"","& _ 
                " ""markingprinterid"", ""isactive"") VALUES (@productid, @uniquecode, @printed, @rec"& _ 
                "eived, @batchid, @sent, @sendconfirmed, @buffered, @printerlineid, @markingprint"& _ 
                "erid, @isactive)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@uniquecode"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "uniquecode"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "printed"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@batchid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@buffered"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "buffered"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@markingprinterid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "markingprinterid"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.Npgsql.NpgsqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE ""red_hires"".""public"".""uniquecode"" SET ""productid"" = @productid, ""uniquecod"& _ 
                "e"" = @uniquecode, ""printed"" = @printed, ""received"" = @received, ""batchid"" = @bat"& _ 
                "chid, ""sent"" = @sent, ""sendconfirmed"" = @sendconfirmed, ""buffered"" = @buffered, "& _ 
                """printerlineid"" = @printerlineid, ""markingprinterid"" = @markingprinterid, ""isact"& _ 
                "ive"" = @isactive WHERE (((@IsNull_productid = 1 AND ""productid"" IS NULL) OR (""pr"& _ 
                "oductid"" = @Original_productid)) AND (""uniquecode"" = @Original_uniquecode) AND ("& _ 
                "(@IsNull_printed = 1 AND ""printed"" IS NULL) OR (""printed"" = @Original_printed)) "& _ 
                "AND (""received"" = @Original_received) AND ((@IsNull_batchid = 1 AND ""batchid"" IS"& _ 
                " NULL) OR (""batchid"" = @Original_batchid)) AND ((@IsNull_sent = 1 AND ""sent"" IS "& _ 
                "NULL) OR (""sent"" = @Original_sent)) AND ((@IsNull_sendconfirmed = 1 AND ""sendcon"& _ 
                "firmed"" IS NULL) OR (""sendconfirmed"" = @Original_sendconfirmed)) AND ((@IsNull_b"& _ 
                "uffered = 1 AND ""buffered"" IS NULL) OR (""buffered"" = @Original_buffered)) AND (("& _ 
                "@IsNull_printerlineid = 1 AND ""printerlineid"" IS NULL) OR (""printerlineid"" = @Or"& _ 
                "iginal_printerlineid)) AND ((@IsNull_markingprinterid = 1 AND ""markingprinterid"""& _ 
                " IS NULL) OR (""markingprinterid"" = @Original_markingprinterid)) AND (""id"" = @Ori"& _ 
                "ginal_id) AND (""isactive"" = @Original_isactive))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@uniquecode"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "uniquecode"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "printed"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@batchid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@buffered"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "buffered"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@markingprinterid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "markingprinterid"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_productid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "productid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_uniquecode"
            param.DbType = Global.System.Data.DbType.[String]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Varchar
            param.IsNullable = true
            param.SourceColumn = "uniquecode"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_printed"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "printed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_received"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "received"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_batchid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_batchid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "batchid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sent"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sent"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_sendconfirmed"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_sendconfirmed"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "sendconfirmed"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_buffered"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "buffered"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_buffered"
            param.DbType = Global.System.Data.DbType.DateTime
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.Timestamp
            param.IsNullable = true
            param.SourceColumn = "buffered"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_printerlineid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "printerlineid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@IsNull_markingprinterid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "markingprinterid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            param.SourceColumnNullMapping = true
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_markingprinterid"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "markingprinterid"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_id"
            param.DbType = Global.System.Data.DbType.Int32
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Integer]
            param.IsNullable = true
            param.SourceColumn = "id"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.Npgsql.NpgsqlParameter()
            param.ParameterName = "@Original_isactive"
            param.DbType = Global.System.Data.DbType.[Boolean]
            param.NpgsqlDbType = Global.NpgsqlTypes.NpgsqlDbType.[Boolean]
            param.IsNullable = true
            param.SourceColumn = "isactive"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.Npgsql.NpgsqlConnection()
            Me._connection.ConnectionString = Global.SerialCom.My.MySettings.Default.red_hiresConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.Npgsql.NpgsqlCommand(0) {}
            Me._commandCollection(0) = New Global.Npgsql.NpgsqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ""productid"", ""uniquecode"", ""printed"", ""received"", ""batchid"", ""sent"", ""send"& _ 
                "confirmed"", ""buffered"", ""printerlineid"", ""markingprinterid"", ""id"", ""isactive"" FR"& _ 
                "OM ""public"".""uniquecode"""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As red_hiresDataSet.uniquecodeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As red_hiresDataSet.uniquecodeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As red_hiresDataSet.uniquecodeDataTable = New red_hiresDataSet.uniquecodeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As red_hiresDataSet.uniquecodeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As red_hiresDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "uniquecode")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal __Original_productid As Global.System.Nullable(Of Integer), ByVal __Original_uniquecode As String, ByVal __Original_printed As Global.System.Nullable(Of Date), ByVal __Original_received As Date, ByVal __Original_batchid As Global.System.Nullable(Of Integer), ByVal __Original_sent As Global.System.Nullable(Of Date), ByVal __Original_sendconfirmed As Global.System.Nullable(Of Date), ByVal __Original_buffered As Global.System.Nullable(Of Date), ByVal __Original_printerlineid As Global.System.Nullable(Of Integer), ByVal __Original_markingprinterid As Global.System.Nullable(Of Integer), ByVal __Original_id As Integer, ByVal __Original_isactive As Boolean) As Integer
            If (__Original_productid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(__Original_productid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (__Original_uniquecode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_uniquecode")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(__Original_uniquecode,String)
            End If
            If (__Original_printed.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(__Original_printed.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(__Original_received,Date)
            If (__Original_batchid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(__Original_batchid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (__Original_sent.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(__Original_sent.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (__Original_sendconfirmed.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(__Original_sendconfirmed.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (__Original_buffered.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(__Original_buffered.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (__Original_printerlineid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(__Original_printerlineid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (__Original_markingprinterid.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(__Original_markingprinterid.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(__Original_id,Integer)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(__Original_isactive,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal __productid As Global.System.Nullable(Of Integer), ByVal __uniquecode As String, ByVal __printed As Global.System.Nullable(Of Date), ByVal __received As Date, ByVal __batchid As Global.System.Nullable(Of Integer), ByVal __sent As Global.System.Nullable(Of Date), ByVal __sendconfirmed As Global.System.Nullable(Of Date), ByVal __buffered As Global.System.Nullable(Of Date), ByVal __printerlineid As Global.System.Nullable(Of Integer), ByVal __markingprinterid As Global.System.Nullable(Of Integer), ByVal __isactive As Boolean) As Integer
            If (__productid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(__productid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (__uniquecode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__uniquecode")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(__uniquecode,String)
            End If
            If (__printed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(__printed.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(__received,Date)
            If (__batchid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(__batchid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__sent.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(__sent.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (__sendconfirmed.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(__sendconfirmed.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (__buffered.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(__buffered.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (__printerlineid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(__printerlineid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (__markingprinterid.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(__markingprinterid.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(__isactive,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal __productid As Global.System.Nullable(Of Integer),  _
                    ByVal __uniquecode As String,  _
                    ByVal __printed As Global.System.Nullable(Of Date),  _
                    ByVal __received As Date,  _
                    ByVal __batchid As Global.System.Nullable(Of Integer),  _
                    ByVal __sent As Global.System.Nullable(Of Date),  _
                    ByVal __sendconfirmed As Global.System.Nullable(Of Date),  _
                    ByVal __buffered As Global.System.Nullable(Of Date),  _
                    ByVal __printerlineid As Global.System.Nullable(Of Integer),  _
                    ByVal __markingprinterid As Global.System.Nullable(Of Integer),  _
                    ByVal __isactive As Boolean,  _
                    ByVal __Original_productid As Global.System.Nullable(Of Integer),  _
                    ByVal __Original_uniquecode As String,  _
                    ByVal __Original_printed As Global.System.Nullable(Of Date),  _
                    ByVal __Original_received As Date,  _
                    ByVal __Original_batchid As Global.System.Nullable(Of Integer),  _
                    ByVal __Original_sent As Global.System.Nullable(Of Date),  _
                    ByVal __Original_sendconfirmed As Global.System.Nullable(Of Date),  _
                    ByVal __Original_buffered As Global.System.Nullable(Of Date),  _
                    ByVal __Original_printerlineid As Global.System.Nullable(Of Integer),  _
                    ByVal __Original_markingprinterid As Global.System.Nullable(Of Integer),  _
                    ByVal __Original_id As Integer,  _
                    ByVal __Original_isactive As Boolean) As Integer
            If (__productid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(__productid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (__uniquecode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__uniquecode")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(__uniquecode,String)
            End If
            If (__printed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(__printed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(__received,Date)
            If (__batchid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(__batchid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (__sent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(__sent.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (__sendconfirmed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(__sendconfirmed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (__buffered.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(__buffered.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (__printerlineid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(__printerlineid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (__markingprinterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(__markingprinterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(__isactive,Boolean)
            If (__Original_productid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(__Original_productid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (__Original_uniquecode Is Nothing) Then
                Throw New Global.System.ArgumentNullException("__Original_uniquecode")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(__Original_uniquecode,String)
            End If
            If (__Original_printed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(__Original_printed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(__Original_received,Date)
            If (__Original_batchid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(__Original_batchid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (__Original_sent.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(__Original_sent.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (__Original_sendconfirmed.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(__Original_sendconfirmed.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (__Original_buffered.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(__Original_buffered.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (__Original_printerlineid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(__Original_printerlineid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (__Original_markingprinterid.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(__Original_markingprinterid.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(__Original_id,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(__Original_isactive,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _ad_userTableAdapter As ad_userTableAdapter
        
        Private _batchTableAdapter As batchTableAdapter
        
        Private _productTableAdapter As productTableAdapter
        
        Private _uniquecodeTableAdapter As uniquecodeTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ad_userTableAdapter() As ad_userTableAdapter
            Get
                Return Me._ad_userTableAdapter
            End Get
            Set
                Me._ad_userTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property batchTableAdapter() As batchTableAdapter
            Get
                Return Me._batchTableAdapter
            End Get
            Set
                Me._batchTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property productTableAdapter() As productTableAdapter
            Get
                Return Me._productTableAdapter
            End Get
            Set
                Me._productTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property uniquecodeTableAdapter() As uniquecodeTableAdapter
            Get
                Return Me._uniquecodeTableAdapter
            End Get
            Set
                Me._uniquecodeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._ad_userTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ad_userTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ad_userTableAdapter.Connection
                End If
                If ((Not (Me._batchTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._batchTableAdapter.Connection) Is Nothing)) Then
                    Return Me._batchTableAdapter.Connection
                End If
                If ((Not (Me._productTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._productTableAdapter.Connection) Is Nothing)) Then
                    Return Me._productTableAdapter.Connection
                End If
                If ((Not (Me._uniquecodeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._uniquecodeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._uniquecodeTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._ad_userTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._batchTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._productTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._uniquecodeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As red_hiresDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._ad_userTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ad_user.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ad_userTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._batchTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.batch.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._batchTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._productTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.product.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._productTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._uniquecodeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.uniquecode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._uniquecodeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As red_hiresDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._ad_userTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ad_user.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ad_userTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._batchTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.batch.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._batchTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._productTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.product.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._productTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._uniquecodeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.uniquecode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._uniquecodeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As red_hiresDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._uniquecodeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.uniquecode.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._uniquecodeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._productTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.product.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._productTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._batchTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.batch.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._batchTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ad_userTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ad_user.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ad_userTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As red_hiresDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._ad_userTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ad_userTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._batchTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._batchTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._productTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._productTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._uniquecodeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._uniquecodeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._ad_userTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ad_userTableAdapter, Me._ad_userTableAdapter.Connection)
                    Me._ad_userTableAdapter.Connection = CType(workConnection,Global.Npgsql.NpgsqlConnection)
                    Me._ad_userTableAdapter.Transaction = CType(workTransaction,Global.Npgsql.NpgsqlTransaction)
                    If Me._ad_userTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ad_userTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ad_userTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._batchTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._batchTableAdapter, Me._batchTableAdapter.Connection)
                    Me._batchTableAdapter.Connection = CType(workConnection,Global.Npgsql.NpgsqlConnection)
                    Me._batchTableAdapter.Transaction = CType(workTransaction,Global.Npgsql.NpgsqlTransaction)
                    If Me._batchTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._batchTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._batchTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._productTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._productTableAdapter, Me._productTableAdapter.Connection)
                    Me._productTableAdapter.Connection = CType(workConnection,Global.Npgsql.NpgsqlConnection)
                    Me._productTableAdapter.Transaction = CType(workTransaction,Global.Npgsql.NpgsqlTransaction)
                    If Me._productTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._productTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._productTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._uniquecodeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._uniquecodeTableAdapter, Me._uniquecodeTableAdapter.Connection)
                    Me._uniquecodeTableAdapter.Connection = CType(workConnection,Global.Npgsql.NpgsqlConnection)
                    Me._uniquecodeTableAdapter.Transaction = CType(workTransaction,Global.Npgsql.NpgsqlTransaction)
                    If Me._uniquecodeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._uniquecodeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._uniquecodeTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._ad_userTableAdapter) Is Nothing) Then
                    Me._ad_userTableAdapter.Connection = CType(revertConnections(Me._ad_userTableAdapter),Global.Npgsql.NpgsqlConnection)
                    Me._ad_userTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._batchTableAdapter) Is Nothing) Then
                    Me._batchTableAdapter.Connection = CType(revertConnections(Me._batchTableAdapter),Global.Npgsql.NpgsqlConnection)
                    Me._batchTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._productTableAdapter) Is Nothing) Then
                    Me._productTableAdapter.Connection = CType(revertConnections(Me._productTableAdapter),Global.Npgsql.NpgsqlConnection)
                    Me._productTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._uniquecodeTableAdapter) Is Nothing) Then
                    Me._uniquecodeTableAdapter.Connection = CType(revertConnections(Me._uniquecodeTableAdapter),Global.Npgsql.NpgsqlConnection)
                    Me._uniquecodeTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
